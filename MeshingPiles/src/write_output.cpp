#include "write_output.h"

void visualizeOriginalPiles(std::string file_stem, int GlobalW, int GlobalH, double cellW, double cellH, vector<vector<PileStruct>>cellsPiles, int PilesNum, int cellsNum, double minx, double maxx, double miny, double maxy)
{
	std::string oplyfilename = "outputs//" + file_stem + "_piles.ply";
	ofstream oplyfile(oplyfilename.c_str(), std::ios_base::out);
	//write header
	oplyfile << "ply\n";
	oplyfile << "format ascii 1.0\n";
	oplyfile << "comment generated by mradwan\n";
	oplyfile << "element vertex " << PilesNum * 8 << "\n";
	oplyfile << "property float x\n";
	oplyfile << "property float y\n";
	oplyfile << "property float z\n";
	oplyfile << "element face " << PilesNum * 12 << '\n';
	oplyfile << "property list uchar int vertex_indices\n";
	oplyfile << "end_header\n";
	for (int cell = 0; cell < cellsNum; cell++)
	{
		if (cellsPiles[cell].size() == 0)
			continue;

		int cellx = cell % GlobalW;
		int celly = cell / GlobalW;
		double x1 = minx + cellW * cellx;
		double x2 = minx + cellW * (cellx + 1);
		double y1 = miny + cellH * celly;
		double y2 = miny + cellH * (celly + 1);

		for (PileStruct pile : cellsPiles[cell])
		{
			double zstart = pile.start;
			double zend = pile.end;

			oplyfile << x1 << " " << y1 << " " << zstart << "\n";
			oplyfile << x2 << " " << y1 << " " << zstart << "\n";
			oplyfile << x2 << " " << y2 << " " << zstart << "\n";
			oplyfile << x1 << " " << y2 << " " << zstart << "\n";

			oplyfile << x1 << " " << y1 << " " << zend << "\n";
			oplyfile << x2 << " " << y1 << " " << zend << "\n";
			oplyfile << x2 << " " << y2 << " " << zend << "\n";
			oplyfile << x1 << " " << y2 << " " << zend << "\n";
		}
	}
	int offset = 0;
	for (int cell = 0; cell < cellsNum; cell++)
	{
		if (cellsPiles[cell].size() == 0)
			continue;

		for (PileStruct pile : cellsPiles[cell])
		{
			oplyfile << "3 " << offset + 0 << " " << offset + 3 << " " << offset + 1 << "\n";
			oplyfile << "3 " << offset + 0 << " " << offset + 2 << " " << offset + 3 << "\n";

			oplyfile << "3 " << offset + 4 << " " << offset + 5 << " " << offset + 7 << "\n";
			oplyfile << "3 " << offset + 4 << " " << offset + 7 << " " << offset + 6 << "\n";

			oplyfile << "3 " << offset + 0 << " " << offset + 1 << " " << offset + 5 << "\n";
			oplyfile << "3 " << offset + 0 << " " << offset + 5 << " " << offset + 4 << "\n";

			oplyfile << "3 " << offset + 2 << " " << offset + 7 << " " << offset + 3 << "\n";
			oplyfile << "3 " << offset + 2 << " " << offset + 6 << " " << offset + 7 << "\n";

			oplyfile << "3 " << offset + 0 << " " << offset + 6 << " " << offset + 2 << "\n";
			oplyfile << "3 " << offset + 0 << " " << offset + 4 << " " << offset + 6 << "\n";

			oplyfile << "3 " << offset + 1 << " " << offset + 3 << " " << offset + 7 << "\n";
			oplyfile << "3 " << offset + 1 << " " << offset + 7 << " " << offset + 5 << "\n";

			offset += 8;
		}

	}

	oplyfile.flush();
	oplyfile.close();
}

void writeOutput(std::string file_stem, vector<PointCoordsExt> points, vector<Triangle> triangles)
{

	std::string ofilename = "outputs//" + file_stem + "_mesh.ply";
	ofstream ofile(ofilename.c_str(), std::ios_base::out);
	//write header
	ofile << "ply\n";
	ofile << "format ascii 1.0\n";
	ofile << "comment generated by mradwan\n";
	ofile << "element vertex " << points.size() << "\n";
	ofile << "property float x\n";
	ofile << "property float y\n";
	ofile << "property float z\n";
	ofile << "element face " << triangles.size() << '\n';
	ofile << "property list uchar int vertex_indices\n";
	ofile << "end_header\n";

	for (PointCoordsExt pnt : points)
	{
		ofile << pnt.x << " " << pnt.y << " " << pnt.z << "\n";
	}

	for (Triangle t : triangles)
	{
		ofile << "3 " << t.v0 << " " << t.v1 << " " << t.v2 << "\n";
	}

	ofile.flush();
	ofile.close();

}

